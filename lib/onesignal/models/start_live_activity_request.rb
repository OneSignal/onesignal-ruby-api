=begin
#OneSignal

#A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

The version of the OpenAPI document: 5.3.0
Contact: devrel@onesignal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0-SNAPSHOT

=end

require 'date'
require 'time'

module OneSignal
  class StartLiveActivityRequest
    # An internal name to assist with your campaign organization. This does not get displayed in the message itself.
    attr_accessor :name

    attr_accessor :event

    # Set a unique activity_id to track and manage the Live Activity.
    attr_accessor :activity_id

    # Default/static data to initialize the Live Activity upon start.
    attr_accessor :event_attributes

    # Dynamic content used to update the running Live Activity at start. Must match the ContentState interface defined in your app.
    attr_accessor :event_updates

    attr_accessor :contents

    attr_accessor :headings

    # Accepts Unix timestamp in seconds. When time reaches the configured stale date, the system considers the Live Activity out of date, and the ActivityState of the Live Activity changes to ActivityState.stale.
    attr_accessor :stale_date

    # Delivery priority through the push provider (APNs). Pass 10 for higher priority notifications, or 5 for lower priority notifications. Lower priority notifications are sent based on the power considerations of the end user's device. If not set, defaults to 10.
    attr_accessor :priority

    # iOS 15+. A score to indicate how a notification should be displayed when grouped. Use a float between 0-1.
    attr_accessor :ios_relevance_score

    # Correlation and idempotency key. A request received with this parameter will first look for another notification with the same idempotency key. If one exists, a notification will not be sent, and result of the previous operation will instead be returned. Therefore, if you plan on using this feature, it's important to use a good source of randomness to generate the UUID passed here. This key is only idempotent for 30 days. After 30 days, the notification could be removed from our system and a notification with the same idempotency key will be sent again.   See Idempotent Notification Requests for more details writeOnly: true 
    attr_accessor :idempotency_key

    # Target specific users by aliases assigned via API. An alias can be an external_id, onesignal_id, or a custom alias. Accepts an object where keys are alias labels and values are arrays of alias IDs to include Example usage: { \"external_id\": [\"exId1\", \"extId2\"], \"internal_label\": [\"id1\", \"id2\"] } Not compatible with any other targeting parameters. REQUIRED: REST API Key Authentication Limit of 2,000 entries per REST API call Note: If targeting push, email, or sms subscribers with same ids, use with target_channel to indicate you are sending a push or email or sms.
    attr_accessor :include_aliases

    # Specific subscription ids to target. Not compatible with other targeting parameters.
    attr_accessor :include_subscription_ids

    # Segment names to include. Only compatible with excluded_segments.
    attr_accessor :included_segments

    # Segment names to exclude. Only compatible with included_segments.
    attr_accessor :excluded_segments

    attr_accessor :filters

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'event' => :'event',
        :'activity_id' => :'activity_id',
        :'event_attributes' => :'event_attributes',
        :'event_updates' => :'event_updates',
        :'contents' => :'contents',
        :'headings' => :'headings',
        :'stale_date' => :'stale_date',
        :'priority' => :'priority',
        :'ios_relevance_score' => :'ios_relevance_score',
        :'idempotency_key' => :'idempotency_key',
        :'include_aliases' => :'include_aliases',
        :'include_subscription_ids' => :'include_subscription_ids',
        :'included_segments' => :'included_segments',
        :'excluded_segments' => :'excluded_segments',
        :'filters' => :'filters'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'event' => :'String',
        :'activity_id' => :'String',
        :'event_attributes' => :'Object',
        :'event_updates' => :'Object',
        :'contents' => :'LanguageStringMap',
        :'headings' => :'LanguageStringMap',
        :'stale_date' => :'Integer',
        :'priority' => :'Integer',
        :'ios_relevance_score' => :'Float',
        :'idempotency_key' => :'String',
        :'include_aliases' => :'Hash<String, Array<String>>',
        :'include_subscription_ids' => :'Array<String>',
        :'included_segments' => :'Array<String>',
        :'excluded_segments' => :'Array<String>',
        :'filters' => :'Array<FilterExpression>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ios_relevance_score',
        :'idempotency_key',
        :'include_aliases',
        :'include_subscription_ids',
        :'included_segments',
        :'excluded_segments',
        :'filters'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OneSignal::StartLiveActivityRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OneSignal::StartLiveActivityRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'event')
        self.event = attributes[:'event']
      else
        self.event = 'start'
      end

      if attributes.key?(:'activity_id')
        self.activity_id = attributes[:'activity_id']
      end

      if attributes.key?(:'event_attributes')
        self.event_attributes = attributes[:'event_attributes']
      end

      if attributes.key?(:'event_updates')
        self.event_updates = attributes[:'event_updates']
      end

      if attributes.key?(:'contents')
        self.contents = attributes[:'contents']
      end

      if attributes.key?(:'headings')
        self.headings = attributes[:'headings']
      end

      if attributes.key?(:'stale_date')
        self.stale_date = attributes[:'stale_date']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'ios_relevance_score')
        self.ios_relevance_score = attributes[:'ios_relevance_score']
      end

      if attributes.key?(:'idempotency_key')
        self.idempotency_key = attributes[:'idempotency_key']
      end

      if attributes.key?(:'include_aliases')
        if (value = attributes[:'include_aliases']).is_a?(Hash)
          self.include_aliases = value
        end
      end

      if attributes.key?(:'include_subscription_ids')
        if (value = attributes[:'include_subscription_ids']).is_a?(Array)
          self.include_subscription_ids = value
        end
      end

      if attributes.key?(:'included_segments')
        if (value = attributes[:'included_segments']).is_a?(Array)
          self.included_segments = value
        end
      end

      if attributes.key?(:'excluded_segments')
        if (value = attributes[:'excluded_segments']).is_a?(Array)
          self.excluded_segments = value
        end
      end

      if attributes.key?(:'filters')
        if (value = attributes[:'filters']).is_a?(Array)
          self.filters = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @event.nil?
        invalid_properties.push('invalid value for "event", event cannot be nil.')
      end

      if @activity_id.nil?
        invalid_properties.push('invalid value for "activity_id", activity_id cannot be nil.')
      end

      if @event_attributes.nil?
        invalid_properties.push('invalid value for "event_attributes", event_attributes cannot be nil.')
      end

      if @event_updates.nil?
        invalid_properties.push('invalid value for "event_updates", event_updates cannot be nil.')
      end

      if @contents.nil?
        invalid_properties.push('invalid value for "contents", contents cannot be nil.')
      end

      if @headings.nil?
        invalid_properties.push('invalid value for "headings", headings cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @event.nil?
      event_validator = EnumAttributeValidator.new('String', ["start"])
      return false unless event_validator.valid?(@event)
      return false if @activity_id.nil?
      return false if @event_attributes.nil?
      return false if @event_updates.nil?
      return false if @contents.nil?
      return false if @headings.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event Object to be assigned
    def event=(event)
      validator = EnumAttributeValidator.new('String', ["start"])
      unless validator.valid?(event)
        fail ArgumentError, "invalid value for \"event\", must be one of #{validator.allowable_values}."
      end
      @event = event
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          event == o.event &&
          activity_id == o.activity_id &&
          event_attributes == o.event_attributes &&
          event_updates == o.event_updates &&
          contents == o.contents &&
          headings == o.headings &&
          stale_date == o.stale_date &&
          priority == o.priority &&
          ios_relevance_score == o.ios_relevance_score &&
          idempotency_key == o.idempotency_key &&
          include_aliases == o.include_aliases &&
          include_subscription_ids == o.include_subscription_ids &&
          included_segments == o.included_segments &&
          excluded_segments == o.excluded_segments &&
          filters == o.filters
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, event, activity_id, event_attributes, event_updates, contents, headings, stale_date, priority, ios_relevance_score, idempotency_key, include_aliases, include_subscription_ids, included_segments, excluded_segments, filters].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OneSignal.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
