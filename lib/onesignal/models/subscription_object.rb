=begin
#OneSignal

#A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

The version of the OpenAPI document: 1.4.0
Contact: devrel@onesignal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0-SNAPSHOT

=end

require 'date'
require 'time'

module OneSignal
  class SubscriptionObject
    attr_accessor :id

    attr_accessor :type

    attr_accessor :token

    attr_accessor :enabled

    attr_accessor :notification_types

    attr_accessor :session_time

    attr_accessor :session_count

    attr_accessor :sdk

    attr_accessor :device_model

    attr_accessor :device_os

    attr_accessor :rooted

    attr_accessor :test_type

    attr_accessor :app_version

    attr_accessor :net_type

    attr_accessor :carrier

    attr_accessor :web_auth

    attr_accessor :web_p256

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'type' => :'type',
        :'token' => :'token',
        :'enabled' => :'enabled',
        :'notification_types' => :'notification_types',
        :'session_time' => :'session_time',
        :'session_count' => :'session_count',
        :'sdk' => :'sdk',
        :'device_model' => :'device_model',
        :'device_os' => :'device_os',
        :'rooted' => :'rooted',
        :'test_type' => :'test_type',
        :'app_version' => :'app_version',
        :'net_type' => :'net_type',
        :'carrier' => :'carrier',
        :'web_auth' => :'web_auth',
        :'web_p256' => :'web_p256'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'type' => :'String',
        :'token' => :'String',
        :'enabled' => :'Boolean',
        :'notification_types' => :'Float',
        :'session_time' => :'Float',
        :'session_count' => :'Float',
        :'sdk' => :'String',
        :'device_model' => :'String',
        :'device_os' => :'String',
        :'rooted' => :'Boolean',
        :'test_type' => :'Float',
        :'app_version' => :'String',
        :'net_type' => :'Float',
        :'carrier' => :'String',
        :'web_auth' => :'String',
        :'web_p256' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OneSignal::SubscriptionObject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OneSignal::SubscriptionObject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'notification_types')
        self.notification_types = attributes[:'notification_types']
      end

      if attributes.key?(:'session_time')
        self.session_time = attributes[:'session_time']
      end

      if attributes.key?(:'session_count')
        self.session_count = attributes[:'session_count']
      end

      if attributes.key?(:'sdk')
        self.sdk = attributes[:'sdk']
      end

      if attributes.key?(:'device_model')
        self.device_model = attributes[:'device_model']
      end

      if attributes.key?(:'device_os')
        self.device_os = attributes[:'device_os']
      end

      if attributes.key?(:'rooted')
        self.rooted = attributes[:'rooted']
      end

      if attributes.key?(:'test_type')
        self.test_type = attributes[:'test_type']
      end

      if attributes.key?(:'app_version')
        self.app_version = attributes[:'app_version']
      end

      if attributes.key?(:'net_type')
        self.net_type = attributes[:'net_type']
      end

      if attributes.key?(:'carrier')
        self.carrier = attributes[:'carrier']
      end

      if attributes.key?(:'web_auth')
        self.web_auth = attributes[:'web_auth']
      end

      if attributes.key?(:'web_p256')
        self.web_p256 = attributes[:'web_p256']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ["iOSPush", "AndroidPush", "FireOSPush", "ChromeExtensionPush", "ChromePush", "WindowsPush", "SafariLegacyPush", "FirefoxPush", "macOSPush", "HuaweiPush", "SafariPush", "Email", "SMS"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["iOSPush", "AndroidPush", "FireOSPush", "ChromeExtensionPush", "ChromePush", "WindowsPush", "SafariLegacyPush", "FirefoxPush", "macOSPush", "HuaweiPush", "SafariPush", "Email", "SMS"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          type == o.type &&
          token == o.token &&
          enabled == o.enabled &&
          notification_types == o.notification_types &&
          session_time == o.session_time &&
          session_count == o.session_count &&
          sdk == o.sdk &&
          device_model == o.device_model &&
          device_os == o.device_os &&
          rooted == o.rooted &&
          test_type == o.test_type &&
          app_version == o.app_version &&
          net_type == o.net_type &&
          carrier == o.carrier &&
          web_auth == o.web_auth &&
          web_p256 == o.web_p256
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, type, token, enabled, notification_types, session_time, session_count, sdk, device_model, device_os, rooted, test_type, app_version, net_type, carrier, web_auth, web_p256].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OneSignal.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
